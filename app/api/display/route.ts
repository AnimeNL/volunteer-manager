// Copyright 2024 Peter Beverloo & AnimeCon. All rights reserved.
// Use of this source code is governed by a MIT license that can be found in the LICENSE file.

import { NextRequest } from 'next/server';
import { z } from 'zod';

import type { ApiDefinition, ApiRequest, ApiResponse } from '../Types';
import { executeAction, noAccess, type ActionProps } from '../Action';
import { readSetting } from '@lib/Settings';

/**
 * Interface definition for the Display API, exposed through /api/display.
 */
const kDisplayDefinition = z.object({
    request: z.object({ /* no input is required */ }),
    response: z.object({
        /**
         * Identifier of the display, through which it can be visually identified.
         */
        identifier: z.string(),

        /**
         * Label that should be shown on the display. Expected to make sense to humans.
         */
        label: z.string(),

        /**
         * Timezone in which the display operates. Will affect the local time.
         */
        timezone: z.string(),

        /**
         * How frequently should the display check in? Indicated in milliseconds.
         */
        updateFrequencyMs: z.number(),
    }),
});

export type DisplayDefinition = ApiDefinition<typeof kDisplayDefinition>;

type Request = ApiRequest<typeof kDisplayDefinition>;
type Response = ApiResponse<typeof kDisplayDefinition>;

/**
 * API through which displays retrieve their context. Each display will be uniquely identified with
 * an autogenerated code, after which it has to be provisioned in our administration area.
 */
async function display(request: Request, props: ActionProps): Promise<Response> {
    if (!props.ip)
        noAccess();

    const updateFrequencySeconds = await readSetting('display-check-in-rate-seconds') ?? 300;
    const updateFrequencyMs = Math.max(10, updateFrequencySeconds) * 1000;

    return {
        identifier: 'todo',
        label: 'Display name 10',
        timezone: 'Europe/Amsterdam',
        updateFrequencyMs,
    };
}

// The /api/display route only provides a single API - call it straight away.
export const GET = (request: NextRequest) => executeAction(request, kDisplayDefinition, display);
