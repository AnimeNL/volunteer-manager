// Copyright 2023 Peter Beverloo & AnimeCon. All rights reserved.
// Use of this source code is governed by a MIT license that can be found in the LICENSE file.

import { z } from 'zod';

import type { ActionProps } from '../Action';
import { ApproveVolunteerPromptBuilder } from './prompts/ApproveVolunteerPromptBuilder';
import { Privilege } from '@lib/auth/Privileges';
import { PromptBuilder } from './prompts/PromptBuilder';
import { executeAccessCheck } from '@lib/auth/AuthenticationContext';

/**
 * Interface definition for the Generative AI API, exposed through /api/ai.
 */
export const kGeneratePromptDefinition = z.object({
    request: z.object({
        /**
         * Type of prompt that is being generated.
         */
        type: z.enum([
            'approve-volunteer',
            'cancel-participation',
            'change-team',
            'reinstate-participation',
            'reject-volunteer',
        ]),
    }),
    response: z.strictObject({
        /**
         * Whether the prompt could be generated successfully.
         */
        success: z.boolean(),

        // -----------------------------------------------------------------------------------------
        // Success case:
        // -----------------------------------------------------------------------------------------

        /**
         * In case of success, the context that was considered in this generated prompt.
         */
        context: z.array(z.string()).optional(),

        /**
         * In case of success, the prompt that was used to generate the message.
         */
        prompt: z.string().optional(),

        /**
         * Result of the generated prompt. Split between an optional subject and a message.
         */
        result: z.strictObject({
            /**
             * The subject that should be associated with the generated message.
             */
            subject: z.string().optional(),

            /**
             * The message that was generated by this prompt.
             */
            message: z.string(),

        }).optional(),

        // -----------------------------------------------------------------------------------------
        // Failure case:
        // -----------------------------------------------------------------------------------------

        /**
         * In case of error, a textual description of what went wrong.
         */
        error: z.string().optional(),
    }),
});

export type GeneratePromptDefinition = z.infer<typeof kGeneratePromptDefinition>;

type Request = GeneratePromptDefinition['request'];
type Response = GeneratePromptDefinition['response'];

/**
 * API that allows AI-related settings to be updated.
 */
export async function generatePrompt(request: Request, props: ActionProps): Promise<Response> {
    // TODO: Permission checks.

    let generator: PromptBuilder;
    switch (request.type) {
        case 'approve-volunteer':
            generator = new ApproveVolunteerPromptBuilder();
            break;

        default:
            return { success: false, error: 'This type of prompt is not yet supported.' };
    }

    const prompt = await generator.build();
    const context = generator.context;

    // TODO: Actually query Vertex AI
    const subject = generator.subject;
    const message = 'TODO';

    return { success: true, context, prompt, result: { subject, message } };
}
