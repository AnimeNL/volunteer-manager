// Copyright 2025 Peter Beverloo & AnimeCon. All rights reserved.
// Use of this source code is governed by a MIT license that can be found in the LICENSE file.

import type { Metadata } from 'next';
import Link from 'next/link';
import { notFound } from 'next/navigation';

import { default as MuiLink } from '@mui/material/Link';
import Table from '@mui/material/Table';
import TableCell from '@mui/material/TableCell';
import TableRow from '@mui/material/TableRow';
import Typography from '@mui/material/Typography';

import type { NextPageParams } from '@lib/NextRouterParams';
import { LocalDateTime } from '@app/admin/components/LocalDateTime';
import { Markdown } from '@components/Markdown';
import { Section } from '@app/admin/components/Section';
import { SectionIntroduction } from '@app/admin/components/SectionIntroduction';
import { requireAuthenticationContext } from '@lib/auth/AuthenticationContext';
import db, { tNardoPersonalised, tUsers } from '@lib/database';

/**
 * This page displays an individual piece of personalised advice to the reader, to inspect whether
 * the AI is generating reasonable results based on the given input.
 */
export default async function PersonalisedNardoAdvicePage(props: NextPageParams<'id'>) {
    const { id } = await props.params;

    await requireAuthenticationContext({
        check: 'admin',
        permission: 'organisation.nardo',
    });

    const dbInstance = db;
    const advice = await dbInstance.selectFrom(tNardoPersonalised)
        .innerJoin(tUsers)
            .on(tUsers.userId.equals(tNardoPersonalised.nardoPersonalisedUserId))
        .where(tNardoPersonalised.nardoPersonalisedId.equals(parseInt(id, /* radix= */ 10)))
        .select({
            date: dbInstance.dateTimeAsString(tNardoPersonalised.nardoPersonalisedDate),
            user: {
                id: tUsers.userId,
                name: tUsers.name,
            },
            input: tNardoPersonalised.nardoPersonalisedInput,
            output: tNardoPersonalised.nardoPersonalisedOutput,
        })
        .executeSelectNoneOrOne();

    if (!advice)
        notFound();

    return (
        <>
            <Section title="Personalised Advice" subtitle={advice.user.name}>
                <SectionIntroduction>
                    This is a piece of personalised advice generated by Del a Rie Advies. This is
                    listed for inspection only: generation happens through the schedule. When the
                    content is inappropriate, consider disabling the feature through Settings and
                    reaching out to the volunteer to explain what happened.
                </SectionIntroduction>
                <Table sx={{ mt: '0px !important' }}>
                    <TableRow>
                        <TableCell width="25%" component="th" scope="row">Volunteer</TableCell>
                        <TableCell>
                            <MuiLink component={Link} href={`/admin/users/${advice.user.id}`}>
                                {advice.user.name}
                            </MuiLink>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell width="25%" component="th" scope="row">Date</TableCell>
                        <TableCell>
                            <LocalDateTime dateTime={advice.date} format="YYYY-MM-DD HH:mm:ss" />
                        </TableCell>
                    </TableRow>
                </Table>
            </Section>
            <Section title="Input prompt">
                <Typography sx={{ whiteSpace: 'pre-line' }}>
                    {advice.input}
                </Typography>
            </Section>
            <Section title="Generated advice">
                <Markdown>{advice.output}</Markdown>
            </Section>
        </>
    );
}

export const metadata: Metadata = {
    title: 'Personalised Advice | Del a Rie Advies | AnimeCon Volunteer Manager',
};
