// @ts-nocheck
/* eslint-disable quotes, max-len */
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { Table } from "ts-sql-query/Table";
import type { DBConnection } from "../Connection";
import {
    TemporalTypeAdapter,
} from "../TemporalTypeAdapter";
import {
    ZonedDateTime,
} from "../../Temporal";
import {
    EventAvailabilityStatus,
} from "../Types";

export class EventsTable extends Table<DBConnection, 'EventsTable'> {
    eventId = this.autogeneratedPrimaryKey('event_id', 'int');
    eventName = this.column('event_name', 'string');
    eventShortName = this.column('event_short_name', 'string');
    eventSlug = this.column('event_slug', 'string');
    eventHidden = this.columnWithDefaultValue('event_hidden', 'int');
    eventStartTime = this.column<ZonedDateTime>('event_start_time', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    eventEndTime = this.column<ZonedDateTime>('event_end_time', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    enableHotelPreferencesStart = this.optionalColumnWithDefaultValue<ZonedDateTime>('enable_hotel_preferences_start', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    enableHotelPreferencesEnd = this.optionalColumnWithDefaultValue<ZonedDateTime>('enable_hotel_preferences_end', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    enableTrainingPreferencesStart = this.optionalColumnWithDefaultValue<ZonedDateTime>('enable_training_preferences_start', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    enableTrainingPreferencesEnd = this.optionalColumnWithDefaultValue<ZonedDateTime>('enable_training_preferences_end', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    enableRefundRequestsStart = this.optionalColumnWithDefaultValue<ZonedDateTime>('enable_refund_requests_start', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    enableRefundRequestsEnd = this.optionalColumnWithDefaultValue<ZonedDateTime>('enable_refund_requests_end', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    eventRefundsStartTime = this.optionalColumnWithDefaultValue<ZonedDateTime>('event_refunds_start_time', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    eventRefundsEndTime = this.optionalColumnWithDefaultValue<ZonedDateTime>('event_refunds_end_time', 'customLocalDateTime', 'dateTime', TemporalTypeAdapter);
    eventAvailabilityStatus = this.column<EventAvailabilityStatus>('event_availability_status', 'enum', 'EventAvailabilityStatus');
    eventLocation = this.optionalColumnWithDefaultValue('event_location', 'string');
    eventTimezone = this.column('event_timezone', 'string');
    eventHotelRoomForm = this.optionalColumnWithDefaultValue('event_hotel_room_form', 'string');
    eventFestivalId = this.optionalColumnWithDefaultValue('event_festival_id', 'int');
    eventIdentityId = this.optionalColumnWithDefaultValue('event_identity_id', 'int');
    publishHotels = this.columnWithDefaultValue('publish_hotels', 'int');
    publishRefunds = this.columnWithDefaultValue('publish_refunds', 'int');
    publishTrainings = this.columnWithDefaultValue('publish_trainings', 'int');

    constructor() {
        super('events');
    }
}


